`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/11/15 13:16:41
// Design Name: 
// Module Name: Ins_Memory
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Ins_Memory(
    input [31:0]In_Addr,
    input RW,
    input [31:0]Ins_Data_in,
    output reg [31:0]Ins_Data_out
    );
    
    
    reg [7:0]Ins[0:127];
    integer i=0;
    initial begin
    {Ins[0*4+0],Ins[0*4+1],Ins[0*4+2],Ins[0*4+3]}=32'b00100100000000010000000000001000;
    {Ins[1*4+0],Ins[1*4+1],Ins[1*4+2],Ins[1*4+3]}=32'b00110100000000100000000000000010;
    {Ins[2*4+0],Ins[2*4+1],Ins[2*4+2],Ins[2*4+3]}=32'b00111000010000110000000000001000;
    {Ins[3*4+0],Ins[3*4+1],Ins[3*4+2],Ins[3*4+3]}=32'b00000000011000010010000000100010;
    {Ins[4*4+0],Ins[4*4+1],Ins[4*4+2],Ins[4*4+3]}=32'b00000000100000100010100000100100;
    {Ins[5*4+0],Ins[5*4+1],Ins[5*4+2],Ins[5*4+3]}=32'b00000000000001010010100010000000;
    {Ins[6*4+0],Ins[6*4+1],Ins[6*4+2],Ins[6*4+3]}=32'b00010000001001011111111111111110;
    {Ins[7*4+0],Ins[7*4+1],Ins[7*4+2],Ins[7*4+3]}=32'b00001100000000000000000000010100;
    {Ins[8*4+0],Ins[8*4+1],Ins[8*4+2],Ins[8*4+3]}=32'b00000001101000010100000000101010;
    {Ins[9*4+0],Ins[9*4+1],Ins[9*4+2],Ins[9*4+3]}=32'b00100100000011101111111111111110;
    {Ins[10*4+0],Ins[10*4+1],Ins[10*4+2],Ins[10*4+3]}=32'b00000001000011100100100000101010;
    {Ins[11*4+0],Ins[11*4+1],Ins[11*4+2],Ins[11*4+3]}=32'b00101001001010100000000000000010;
    {Ins[12*4+0],Ins[12*4+1],Ins[12*4+2],Ins[12*4+3]}=32'b00101001010010110000000000000000;
    {Ins[13*4+0],Ins[13*4+1],Ins[13*4+2],Ins[13*4+3]}=32'b00000001011010100101100000100000;
    {Ins[14*4+0],Ins[14*4+1],Ins[14*4+2],Ins[14*4+3]}=32'b00010101011000101111111111111110;
    {Ins[15*4+0],Ins[15*4+1],Ins[15*4+2],Ins[15*4+3]}=32'b00100100000011001111111111111110;
    {Ins[16*4+0],Ins[16*4+1],Ins[16*4+2],Ins[16*4+3]}=32'b00100101100011000000000000000001;
    {Ins[17*4+0],Ins[17*4+1],Ins[17*4+2],Ins[17*4+3]}=32'b00100001100000001111111111111110;
    {Ins[18*4+0],Ins[18*4+1],Ins[18*4+2],Ins[18*4+3]}=32'b00110000010011000000000000000010;
    {Ins[19*4+0],Ins[19*4+1],Ins[19*4+2],Ins[19*4+3]}=32'b00001000000000000000000000010111;
    {Ins[20*4+0],Ins[20*4+1],Ins[20*4+2],Ins[20*4+3]}=32'b10101100001000100000000000000100;
    {Ins[21*4+0],Ins[21*4+1],Ins[21*4+2],Ins[21*4+3]}=32'b10001100001011010000000000000100;
    {Ins[22*4+0],Ins[22*4+1],Ins[22*4+2],Ins[22*4+3]}=32'b00000011111000000000000000001000;
    {Ins[23*4+0],Ins[23*4+1],Ins[23*4+2],Ins[23*4+3]}=32'b11111100000000000000000000000000;



    end
    
    
    
    
    always@(*)
    begin
        if(RW) //ÎÞ²Ù×÷
        begin
            Ins_Data_out<={Ins[In_Addr],Ins[In_Addr+1],Ins[In_Addr+2],Ins[In_Addr+3]};
//            Ins[In_Addr]=Data_in;
//            for(i=0; i<32; i=i+2)
//                Ins[i]<=32'hffff_fffa;
//                Ins[i+1]<=32'hffff_ff11;
        end 
        else 
        begin
            
            Ins_Data_out<={Ins[In_Addr],Ins[In_Addr+1],Ins[In_Addr+2],Ins[In_Addr+3]};
        end
             
                
    end        
endmodule
